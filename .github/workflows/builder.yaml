name: Build and Push Docker Images

on:
  workflow_run:
    workflows: ["Update build.yaml on new submodule release"]
    types:
      - completed
  push:
    tags:
      - '*'
  workflow_dispatch:
  
env:
  REPOSITORY: pulpyyyy
  REGISTRY: docker.io
  
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_addon:
    name: Build addon
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, armhf, armv7, aarch64,  i386]
        addon: [zwavejsuiproxy]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./"
        
      - name: Login to DockerHub
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if Docker image exists
        run: |
          IMAGE="${{ env.REPOSITORY }}/${{ matrix.addon }}"
          VERSION=$(grep -E '^version:' "${{ matrix.addon }}/config.yaml" | awk '{print $2}' | sed 's/"//g')

          STATUS=$(curl -s https://hub.docker.com/v2/repositories/$IMAGE/tags | grep -Po '"name":\s*"\K'"$VERSION"'')
          echo $IMAGE
          echo $VERSION
          echo $STATUS
          if [ -z "$STATUS" ]; then
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
            echo "The image $IMAGE:$TAG does not exist on Docker Hub."
          else
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
            echo "The image $IMAGE:$TAG exists on Docker Hub."
          fi
          
      - name: Publish ${{ matrix.arch }} builder
        if: env.IMAGE_EXISTS == 'false'
        uses: home-assistant/builder@2025.03.0
        with:
          args: |
            --addon \
            --${{ matrix.arch }} \
            --docker-hub "${{ env.REGISTRY }}" \
            --target /data/${{ matrix.addon }} \
            --image "${{ env.REPOSITORY }}/${{ matrix.addon }}"